name: Deploy Discord Bots

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  PROJECT_PATH: ${{ secrets.PROJECT_PATH }}
  BAN_STATS_TOKEN: ${{ secrets.BAN_STATS_DISCORD_TOKEN }}
  RANDOM_COLORS_TOKEN: ${{ secrets.RANDOM_COLORS_DISCORD_TOKEN }}
  SUMMARY_BOT_TOKEN: ${{ secrets.SUMMARY_BOT_TOKEN }}
  FLOWCHART_BOT_TOKEN: ${{ secrets.FLOWCHART_BOT_TOKEN }}
  MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
  GUILD_ID: ${{ secrets.GUILD_ID }}
  LOG_CHANNEL_ID: ${{ secrets.RANDOM_COLORS_LOG_CHANNEL_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
        
    - name: Create deployment script
      run: |
        cat > deploy_script.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Navigate to project directory
        cd $PROJECT_PATH
        
        # Pull latest changes
        git pull origin main
        
        # Create environment files if they don't exist
        if [ ! -f ban_stats/.env ]; then
          echo "Creating ban_stats .env file..."
          cat > ban_stats/.env << ENVEOF
        DISCORD_TOKEN=$BAN_STATS_TOKEN
        GUILD_ID=$GUILD_ID
        ENVEOF
        fi
        
        if [ ! -f random_colors/.env ]; then
          echo "Creating random_colors .env file..."
          cat > random_colors/.env << ENVEOF
        DISCORD_TOKEN=$RANDOM_COLORS_TOKEN
        GUILD_ID=$GUILD_ID
        ROLE_NAME=Random Colors
        LOG_CHANNEL_ID=$LOG_CHANNEL_ID
        ENVEOF
        fi
        
        if [ ! -f summary/.env ]; then
          echo "Creating summary .env file..."
          cat > summary/.env << ENVEOF
        MISTRAL_API_KEY=$MISTRAL_API_KEY
        BOT_TOKEN=$SUMMARY_BOT_TOKEN
        GUILD_ID=$GUILD_ID
        ENVEOF
        fi
        
        if [ ! -f flowchart/.env ]; then
          echo "Creating flowchart .env file..."
          cat > flowchart/.env << ENVEOF
        DISCORD_BOT_TOKEN=$FLOWCHART_BOT_TOKEN
        ENVEOF
        fi
        
        # Setup environment if needed
        if [ ! -d "venv" ]; then
          echo "Setting up Python environment..."
          ./scripts/setup_venv.sh
        else
          echo "Updating dependencies..."
          source venv/bin/activate
          pip install -r requirements.txt
        fi
        
        # Deploy using PM2
        echo "Deploying bots..."
        ./scripts/deploy.sh
        
        echo "Deployment completed successfully!"
        EOF
        
        chmod +x deploy_script.sh

    - name: Deploy to server
      run: |
        scp deploy_script.sh $SSH_USER@$SERVER_HOST:/tmp/
        ssh $SSH_USER@$SERVER_HOST "
          export PROJECT_PATH='$PROJECT_PATH'
          export BAN_STATS_TOKEN='$BAN_STATS_TOKEN'
          export RANDOM_COLORS_TOKEN='$RANDOM_COLORS_TOKEN'
          export SUMMARY_BOT_TOKEN='$SUMMARY_BOT_TOKEN'
          export FLOWCHART_BOT_TOKEN='$FLOWCHART_BOT_TOKEN'
          export MISTRAL_API_KEY='$MISTRAL_API_KEY'
          export GUILD_ID='$GUILD_ID'
          export LOG_CHANNEL_ID='$LOG_CHANNEL_ID'
          /tmp/deploy_script.sh
          rm /tmp/deploy_script.sh
        "
        
    - name: Verify deployment
      run: |
        ssh $SSH_USER@$SERVER_HOST "
          cd $PROJECT_PATH
          echo 'Current PM2 status:'
          pm2 status
          echo 'Checking bot processes...'
          pm2 list | grep -E '(ban-stats-bot|random-colors-bot|summary-bot|flowchart-bot)' || echo 'Some bots may not be running'
        "
        
    - name: Notify on success
      if: success()
      run: |
        echo "Discord bots deployed successfully!"
        
    - name: Notify on failure  
      if: failure()
      run: |
        echo "Deployment failed! Check the logs for details."
        exit 1